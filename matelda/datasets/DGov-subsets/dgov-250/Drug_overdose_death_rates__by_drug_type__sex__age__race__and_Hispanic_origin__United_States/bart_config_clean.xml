<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/bartdb</uri>
            <schema>target</schema>
            <login>postgres</login>
            <password>postgres</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="clean">/home/fatemeh/ED-Scale/Sandbox_Generation/metanome_input_files/processed/Drug_overdose_death_rates__by_drug_type__sex__age__race__and_Hispanic_origin__United_States/clean.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies><![CDATA[DCs: 

            e1: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $estimate1 == $estimate2, $flag1 != $flag2 -> #fail. 

        
            e2: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stublabel1 == $stublabel2, $age1 != $age2 -> #fail. 

        
            e3: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stublabel1 == $stublabel2, $agenum1 != $agenum2 -> #fail. 

        
            e4: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stublabel1 == $stublabel2, $stubnamenum1 != $stubnamenum2 -> #fail. 

        
            e5: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stublabelnum1 == $stublabelnum2, $age1 != $age2 -> #fail. 

        
            e6: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stublabelnum1 == $stublabelnum2, $agenum1 != $agenum2 -> #fail. 

        
            e7: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stublabelnum1 == $stublabelnum2, $stubnamenum1 != $stubnamenum2 -> #fail. 

        
            e8: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $year1 == $year2, $yearnum1 != $yearnum2 -> #fail. 

        
            e9: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $yearnum1 == $yearnum2, $year1 != $year2 -> #fail. 

        
            e10: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $age1 == $age2, $agenum1 != $agenum2 -> #fail. 

        
            e11: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $agenum1 == $agenum2, $age1 != $age2 -> #fail. 

        
            e12: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $stubname1 == $stubname2, $stubnamenum1 != $stubnamenum2 -> #fail. 

        
            e13: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $panel1 == $panel2, $panelnum1 != $panelnum2 -> #fail. 

        
            e14: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $panelnum1 == $panelnum2, $panel1 != $panel2 -> #fail. 

        
            e15: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $unit1 == $unit2, $unitnum1 != $unitnum2 -> #fail. 

        
            e16: clean(indicator: $indicator1, panel: $panel1, panelnum: $panelnum1, unit: $unit1, unitnum: $unitnum1, stubname: $stubname1, stubnamenum: $stubnamenum1, stublabel: $stublabel1, stublabelnum: $stublabelnum1, year: $year1, yearnum: $yearnum1, age: $age1, agenum: $agenum1, estimate: $estimate1, flag: $flag1),
            clean(indicator: $indicator2, panel: $panel2, panelnum: $panelnum2, unit: $unit2, unitnum: $unitnum2, stubname: $stubname2, stubnamenum: $stubnamenum2, stublabel: $stublabel2, stublabelnum: $stublabelnum2, year: $year2, yearnum: $yearnum2, age: $age2, agenum: $agenum2, estimate: $estimate2, flag: $flag2),
                $unitnum1 == $unitnum2, $unit1 != $unit2 -> #fail. 

        ]]></dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>./</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>clean_changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
            <vioGenQuery id="e1"><comparison>(estimate1 == estimate2)</comparison><percentage>0.5138086062941554</percentage></vioGenQuery><vioGenQuery id="e1"><comparison>(flag1 != flag2)</comparison><percentage>0.5138086062941554</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(stublabel1 == stublabel2)</comparison><percentage>0.5138086062941554</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(age1 != age2)</comparison><percentage>0.5138086062941554</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(stublabel1 == stublabel2)</comparison><percentage>0.5138086062941554</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(agenum1 != agenum2)</comparison><percentage>0.5138086062941554</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(stublabel1 == stublabel2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(stubnamenum1 != stubnamenum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(stublabelnum1 == stublabelnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(age1 != age2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(stublabelnum1 == stublabelnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(agenum1 != agenum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(stublabelnum1 == stublabelnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(stubnamenum1 != stubnamenum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(year1 == year2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(yearnum1 != yearnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(yearnum1 == yearnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(year1 != year2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(age1 == age2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(agenum1 != agenum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e11"><comparison>(agenum1 == agenum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e11"><comparison>(age1 != age2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e12"><comparison>(stubname1 == stubname2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e12"><comparison>(stubnamenum1 != stubnamenum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e13"><comparison>(panel1 == panel2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e13"><comparison>(panelnum1 != panelnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e14"><comparison>(panelnum1 == panelnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e14"><comparison>(panel1 != panel2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e15"><comparison>(unit1 == unit2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e15"><comparison>(unitnum1 != unitnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e16"><comparison>(unitnum1 == unitnum2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery><vioGenQuery id="e16"><comparison>(unit1 != unit2)</comparison><percentage>0.497752087347463</percentage></vioGenQuery></vioGenQueries>
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy> TypoRandom </strategy>
            </defaultStrategy> 
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <randomErrors>
            <tables>
                <table name="clean"> 
                    <percentage>8</percentage> <!-- Percentage is wrt attributes to dirty in the table -->
                    <attributes>
                    <atrribute>indicator</atrribute><atrribute>panel</atrribute><atrribute>unit</atrribute><atrribute>stubname</atrribute><atrribute>stublabel</atrribute><atrribute>age</atrribute><atrribute>flag</atrribute></attributes>
                </table>
            </tables>
        </randomErrors>
    
        <outlierErrors>
            <tables>
                <table name="clean">
                    <attributes>
                    <atrribute percentage="1" detectable="true">panelnum</atrribute><atrribute percentage="1" detectable="true">unitnum</atrribute><atrribute percentage="1" detectable="true">stubnamenum</atrribute><atrribute percentage="1" detectable="true">stublabelnum</atrribute><atrribute percentage="1" detectable="true">year</atrribute><atrribute percentage="1" detectable="true">yearnum</atrribute><atrribute percentage="1" detectable="true">agenum</atrribute><atrribute percentage="1" detectable="true">estimate</atrribute></attributes>
                </table>
            </tables>
        </outlierErrors>
        
        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>