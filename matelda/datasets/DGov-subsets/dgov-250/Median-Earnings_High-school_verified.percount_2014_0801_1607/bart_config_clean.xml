<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/bartdb</uri>
            <schema>target</schema>
            <login>postgres</login>
            <password>postgres</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="clean">/home/fatemeh/ED-Scale/Sandbox_Generation/metanome_input_files/processed/Median-Earnings_High-school_verified.percount_2014_0801_1607/clean.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies><![CDATA[DCs: 

            e1: clean(characteristic: $characteristic1, sex: $sex1, raceethnicity: $raceethnicity1, year: $year1, earnings: $earnings1, standard_erroron_earnings: $standard_erroron_earnings1, noteon_earnings: $noteon_earnings1, countinthousands: $countinthousands1, standard_erroron_countinthousands: $standard_erroron_countinthousands1, noteon_count: $noteon_count1),
            clean(characteristic: $characteristic2, sex: $sex2, raceethnicity: $raceethnicity2, year: $year2, earnings: $earnings2, standard_erroron_earnings: $standard_erroron_earnings2, noteon_earnings: $noteon_earnings2, countinthousands: $countinthousands2, standard_erroron_countinthousands: $standard_erroron_countinthousands2, noteon_count: $noteon_count2),
                $characteristic1 == $characteristic2, $raceethnicity1 != $raceethnicity2 -> #fail. 

        
            e2: clean(characteristic: $characteristic1, sex: $sex1, raceethnicity: $raceethnicity1, year: $year1, earnings: $earnings1, standard_erroron_earnings: $standard_erroron_earnings1, noteon_earnings: $noteon_earnings1, countinthousands: $countinthousands1, standard_erroron_countinthousands: $standard_erroron_countinthousands1, noteon_count: $noteon_count1),
            clean(characteristic: $characteristic2, sex: $sex2, raceethnicity: $raceethnicity2, year: $year2, earnings: $earnings2, standard_erroron_earnings: $standard_erroron_earnings2, noteon_earnings: $noteon_earnings2, countinthousands: $countinthousands2, standard_erroron_countinthousands: $standard_erroron_countinthousands2, noteon_count: $noteon_count2),
                $characteristic1 == $characteristic2, $sex1 != $sex2 -> #fail. 

        
            e3: clean(characteristic: $characteristic1, sex: $sex1, raceethnicity: $raceethnicity1, year: $year1, earnings: $earnings1, standard_erroron_earnings: $standard_erroron_earnings1, noteon_earnings: $noteon_earnings1, countinthousands: $countinthousands1, standard_erroron_countinthousands: $standard_erroron_countinthousands1, noteon_count: $noteon_count1),
            clean(characteristic: $characteristic2, sex: $sex2, raceethnicity: $raceethnicity2, year: $year2, earnings: $earnings2, standard_erroron_earnings: $standard_erroron_earnings2, noteon_earnings: $noteon_earnings2, countinthousands: $countinthousands2, standard_erroron_countinthousands: $standard_erroron_countinthousands2, noteon_count: $noteon_count2),
                $noteon_count1 == $noteon_count2, $noteon_earnings1 != $noteon_earnings2 -> #fail. 

        ]]></dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>./</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>clean_changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
            <vioGenQuery id="e1"><comparison>(characteristic1 == characteristic2)</comparison><percentage>1.282051282051282</percentage></vioGenQuery><vioGenQuery id="e1"><comparison>(raceethnicity1 != raceethnicity2)</comparison><percentage>1.282051282051282</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(characteristic1 == characteristic2)</comparison><percentage>0.9615384615384615</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(sex1 != sex2)</comparison><percentage>0.9615384615384615</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(noteon_count1 == noteon_count2)</comparison><percentage>0.9615384615384615</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(noteon_earnings1 != noteon_earnings2)</comparison><percentage>0.9615384615384615</percentage></vioGenQuery></vioGenQueries>
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy> TypoRandom </strategy>
            </defaultStrategy> 
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <randomErrors>
            <tables>
                <table name="clean"> 
                    <percentage>3</percentage> <!-- Percentage is wrt attributes to dirty in the table -->
                    <attributes>
                    <atrribute>characteristic</atrribute><atrribute>sex</atrribute><atrribute>raceethnicity</atrribute><atrribute>noteon_earnings</atrribute><atrribute>noteon_count</atrribute></attributes>
                </table>
            </tables>
        </randomErrors>
    
        <outlierErrors>
            <tables>
                <table name="clean">
                    <attributes>
                    <atrribute percentage="0" detectable="true">year</atrribute><atrribute percentage="0" detectable="true">earnings</atrribute><atrribute percentage="0" detectable="true">standard_erroron_earnings</atrribute><atrribute percentage="0" detectable="true">countinthousands</atrribute><atrribute percentage="0" detectable="true">standard_erroron_countinthousands</atrribute></attributes>
                </table>
            </tables>
        </outlierErrors>
        
        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>