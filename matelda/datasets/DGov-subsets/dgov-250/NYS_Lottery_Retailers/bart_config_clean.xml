<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/bartdb</uri>
            <schema>target</schema>
            <login>postgres</login>
            <password>postgres</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="clean">/home/fatemeh/ED-Scale/Sandbox_Generation/metanome_input_files/processed/NYS_Lottery_Retailers/clean.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies><![CDATA[DCs: 

            e1: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $georeference1 != $georeference2 -> #fail. 

        
            e2: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $street1 != $street2 -> #fail. 

        
            e3: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $longitude1 != $longitude2 -> #fail. 

        
            e4: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $latitude1 != $latitude2 -> #fail. 

        
            e5: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $name1 != $name2 -> #fail. 

        
            e6: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $zip1 != $zip2 -> #fail. 

        
            e7: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $city1 != $city2 -> #fail. 

        
            e8: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $retailer1 == $retailer2, $quick_draw1 != $quick_draw2 -> #fail. 

        
            e9: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $georeference1 == $georeference2, $longitude1 != $longitude2 -> #fail. 

        
            e10: clean(retailer: $retailer1, name: $name1, street: $street1, city: $city1, state: $state1, zip: $zip1, quick_draw: $quick_draw1, latitude: $latitude1, longitude: $longitude1, georeference: $georeference1),
            clean(retailer: $retailer2, name: $name2, street: $street2, city: $city2, state: $state2, zip: $zip2, quick_draw: $quick_draw2, latitude: $latitude2, longitude: $longitude2, georeference: $georeference2),
                $georeference1 == $georeference2, $latitude1 != $latitude2 -> #fail. 

        ]]></dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>./</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>clean_changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
            <vioGenQuery id="e1"><comparison>(retailer1 == retailer2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e1"><comparison>(georeference1 != georeference2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(retailer1 == retailer2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(street1 != street2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(retailer1 == retailer2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(longitude1 != longitude2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(retailer1 == retailer2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(latitude1 != latitude2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(retailer1 == retailer2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(name1 != name2)</comparison><percentage>0.6040408248281601</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(retailer1 == retailer2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(zip1 != zip2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(retailer1 == retailer2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(city1 != city2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(retailer1 == retailer2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(quick_draw1 != quick_draw2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(georeference1 == georeference2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(longitude1 != longitude2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(georeference1 == georeference2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(latitude1 != latitude2)</comparison><percentage>0.5970978268416296</percentage></vioGenQuery></vioGenQueries>
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy> TypoRandom </strategy>
            </defaultStrategy> 
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <randomErrors>
            <tables>
                <table name="clean"> 
                    <percentage>7</percentage> <!-- Percentage is wrt attributes to dirty in the table -->
                    <attributes>
                    <atrribute>name</atrribute><atrribute>street</atrribute><atrribute>city</atrribute><atrribute>state</atrribute><atrribute>quick_draw</atrribute><atrribute>georeference</atrribute></attributes>
                </table>
            </tables>
        </randomErrors>
    
        <outlierErrors>
            <tables>
                <table name="clean">
                    <attributes>
                    <atrribute percentage="1" detectable="true">retailer</atrribute><atrribute percentage="1" detectable="true">zip</atrribute><atrribute percentage="1" detectable="true">latitude</atrribute><atrribute percentage="1" detectable="true">longitude</atrribute></attributes>
                </table>
            </tables>
        </outlierErrors>
        
        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>