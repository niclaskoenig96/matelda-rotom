<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/bartdb</uri>
            <schema>target</schema>
            <login>postgres</login>
            <password>postgres</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="clean">/home/fatemeh/ED-Scale/Sandbox_Generation/metanome_input_files/processed/oklahoma-public-school-site-directory-august-2015/clean.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies><![CDATA[DCs: 

            e1: clean(county_name: $county_name1, district_name: $district_name1, co_dist_code: $co_dist_code1, site_code: $site_code1, school_site: $school_site1, total_enrollment: $total_enrollment1, telephone: $telephone1, principal: $principal1, mailing_address: $mailing_address1, mailing_city: $mailing_city1, mailing_state: $mailing_state1, mailing_zip: $mailing_zip1, grades_low_high: $grades_low_high1, certified_staff: $certified_staff1),
            clean(county_name: $county_name2, district_name: $district_name2, co_dist_code: $co_dist_code2, site_code: $site_code2, school_site: $school_site2, total_enrollment: $total_enrollment2, telephone: $telephone2, principal: $principal2, mailing_address: $mailing_address2, mailing_city: $mailing_city2, mailing_state: $mailing_state2, mailing_zip: $mailing_zip2, grades_low_high: $grades_low_high2, certified_staff: $certified_staff2),
                $telephone1 == $telephone2, $mailing_state1 != $mailing_state2 -> #fail. 

        
            e2: clean(county_name: $county_name1, district_name: $district_name1, co_dist_code: $co_dist_code1, site_code: $site_code1, school_site: $school_site1, total_enrollment: $total_enrollment1, telephone: $telephone1, principal: $principal1, mailing_address: $mailing_address1, mailing_city: $mailing_city1, mailing_state: $mailing_state1, mailing_zip: $mailing_zip1, grades_low_high: $grades_low_high1, certified_staff: $certified_staff1),
            clean(county_name: $county_name2, district_name: $district_name2, co_dist_code: $co_dist_code2, site_code: $site_code2, school_site: $school_site2, total_enrollment: $total_enrollment2, telephone: $telephone2, principal: $principal2, mailing_address: $mailing_address2, mailing_city: $mailing_city2, mailing_state: $mailing_state2, mailing_zip: $mailing_zip2, grades_low_high: $grades_low_high2, certified_staff: $certified_staff2),
                $mailing_address1 == $mailing_address2, $mailing_state1 != $mailing_state2 -> #fail. 

        
            e3: clean(county_name: $county_name1, district_name: $district_name1, co_dist_code: $co_dist_code1, site_code: $site_code1, school_site: $school_site1, total_enrollment: $total_enrollment1, telephone: $telephone1, principal: $principal1, mailing_address: $mailing_address1, mailing_city: $mailing_city1, mailing_state: $mailing_state1, mailing_zip: $mailing_zip1, grades_low_high: $grades_low_high1, certified_staff: $certified_staff1),
            clean(county_name: $county_name2, district_name: $district_name2, co_dist_code: $co_dist_code2, site_code: $site_code2, school_site: $school_site2, total_enrollment: $total_enrollment2, telephone: $telephone2, principal: $principal2, mailing_address: $mailing_address2, mailing_city: $mailing_city2, mailing_state: $mailing_state2, mailing_zip: $mailing_zip2, grades_low_high: $grades_low_high2, certified_staff: $certified_staff2),
                $co_dist_code1 == $co_dist_code2, $district_name1 != $district_name2 -> #fail. 

        
            e4: clean(county_name: $county_name1, district_name: $district_name1, co_dist_code: $co_dist_code1, site_code: $site_code1, school_site: $school_site1, total_enrollment: $total_enrollment1, telephone: $telephone1, principal: $principal1, mailing_address: $mailing_address1, mailing_city: $mailing_city1, mailing_state: $mailing_state1, mailing_zip: $mailing_zip1, grades_low_high: $grades_low_high1, certified_staff: $certified_staff1),
            clean(county_name: $county_name2, district_name: $district_name2, co_dist_code: $co_dist_code2, site_code: $site_code2, school_site: $school_site2, total_enrollment: $total_enrollment2, telephone: $telephone2, principal: $principal2, mailing_address: $mailing_address2, mailing_city: $mailing_city2, mailing_state: $mailing_state2, mailing_zip: $mailing_zip2, grades_low_high: $grades_low_high2, certified_staff: $certified_staff2),
                $co_dist_code1 == $co_dist_code2, $county_name1 != $county_name2 -> #fail. 

        ]]></dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>./</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>clean_changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
            <vioGenQuery id="e1"><comparison>(telephone1 == telephone2)</comparison><percentage>1.5503875968992251</percentage></vioGenQuery><vioGenQuery id="e1"><comparison>(mailing_state1 != mailing_state2)</comparison><percentage>1.5503875968992251</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(mailing_address1 == mailing_address2)</comparison><percentage>1.4950166112956813</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(mailing_state1 != mailing_state2)</comparison><percentage>1.4950166112956813</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(co_dist_code1 == co_dist_code2)</comparison><percentage>1.4950166112956813</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(district_name1 != district_name2)</comparison><percentage>1.4950166112956813</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(co_dist_code1 == co_dist_code2)</comparison><percentage>1.4950166112956813</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(county_name1 != county_name2)</comparison><percentage>1.4950166112956813</percentage></vioGenQuery></vioGenQueries>
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy> TypoRandom </strategy>
            </defaultStrategy> 
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <randomErrors>
            <tables>
                <table name="clean"> 
                    <percentage>7</percentage> <!-- Percentage is wrt attributes to dirty in the table -->
                    <attributes>
                    <atrribute>county_name</atrribute><atrribute>district_name</atrribute><atrribute>co_dist_code</atrribute><atrribute>school_site</atrribute><atrribute>telephone</atrribute><atrribute>principal</atrribute><atrribute>mailing_address</atrribute><atrribute>mailing_city</atrribute><atrribute>mailing_state</atrribute><atrribute>grades_low_high</atrribute></attributes>
                </table>
            </tables>
        </randomErrors>
    
        <outlierErrors>
            <tables>
                <table name="clean">
                    <attributes>
                    <atrribute percentage="1" detectable="true">site_code</atrribute><atrribute percentage="1" detectable="true">total_enrollment</atrribute><atrribute percentage="1" detectable="true">mailing_zip</atrribute><atrribute percentage="1" detectable="true">certified_staff</atrribute></attributes>
                </table>
            </tables>
        </outlierErrors>
        
        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>