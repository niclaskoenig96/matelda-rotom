<task>
    <!-- ****************************************************
                      DATABASES
    **************************************************** -->
    <target> 
        <type>DBMS</type>
        <access-configuration>
            <driver>org.postgresql.Driver</driver>
            <uri>jdbc:postgresql://localhost:5433/bartdb</uri>
            <schema>target</schema>
            <login>postgres</login>
            <password>postgres</password>
        </access-configuration>
        <import>
            <input type="csv" separator="," table="clean">/home/fatemeh/ED-Scale/Sandbox_Generation/metanome_input_files/processed/Certified_Disadvantaged_Business_Enterprise__DBE__Directory/clean.csv</input>
        </import>
    </target>

    <!-- ****************************************************
                    DEPENDENCIES
    **************************************************** -->
    <dependencies><![CDATA[DCs: 

            e1: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $email1 != $email2 -> #fail. 

        
            e2: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $owner_last1 != $owner_last2 -> #fail. 

        
            e3: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $owner_first1 != $owner_first2 -> #fail. 

        
            e4: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $website1 != $website2 -> #fail. 

        
            e5: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $dba_name1 != $dba_name2 -> #fail. 

        
            e6: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $agency1 != $agency2 -> #fail. 

        
            e7: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $company_name1 == $company_name2, $certification_type1 != $certification_type2 -> #fail. 

        
            e8: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $email1 == $email2, $owner_last1 != $owner_last2 -> #fail. 

        
            e9: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $email1 == $email2, $dba_name1 != $dba_name2 -> #fail. 

        
            e10: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $email1 == $email2, $agency1 != $agency2 -> #fail. 

        
            e11: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $email1 == $email2, $certification_type1 != $certification_type2 -> #fail. 

        
            e12: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $phone1 == $phone2, $owner_last1 != $owner_last2 -> #fail. 

        
            e13: clean(company_name: $company_name1, dba_name: $dba_name1, owner_first: $owner_first1, owner_last: $owner_last1, physical_address: $physical_address1, mailing_address: $mailing_address1, phone: $phone1, fax: $fax1, email: $email1, agency: $agency1, certification_type: $certification_type1, certified: $certified1, capability: $capability1, service_type: $service_type1, certifying_agency: $certifying_agency1, commodity_codes: $commodity_codes1, website: $website1),
            clean(company_name: $company_name2, dba_name: $dba_name2, owner_first: $owner_first2, owner_last: $owner_last2, physical_address: $physical_address2, mailing_address: $mailing_address2, phone: $phone2, fax: $fax2, email: $email2, agency: $agency2, certification_type: $certification_type2, certified: $certified2, capability: $capability2, service_type: $service_type2, certifying_agency: $certifying_agency2, commodity_codes: $commodity_codes2, website: $website2),
                $phone1 == $phone2, $agency1 != $agency2 -> #fail. 

        ]]></dependencies>

    <!-- ****************************************************
                      CONFIGURATION
    **************************************************** -->
    <configuration>
        <!-- To print extra information in the ouput (default = false) -->
        <printLog>true</printLog>

        <!-- To load DB every time on start (default = false) -->
        <recreateDBOnStart>true</recreateDBOnStart>

        <!-- To apply the changes (default = false) -->
        <applyCellChanges>true</applyCellChanges>

        <!-- To  apply cell changes on a copy of the original target, with a custom suffix (default = true) -->
        <cloneTargetSchema>true</cloneTargetSchema>
        <cloneSuffix>_dirty</cloneSuffix>

        <!-- To export the dirty db -->
        <exportDirtyDB>true</exportDirtyDB>
        <exportDirtyDBPath>./</exportDirtyDBPath>
        <exportDirtyDBType>CSV</exportDirtyDBType>

        <!-- To export the changes -->
        <exportCellChanges>true</exportCellChanges>
        <exportCellChangesPath>clean_changes.csv</exportCellChangesPath>

        <!-- To compute an estimate of the reparability (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To generate all possible changes (default = false - slow, only for toy examples)-->
        <generateAllChanges>false</generateAllChanges>

        <!-- To avoid interactions among changes. (default = true) -->
        <avoidInteractions>true</avoidInteractions>

        <!-- To check, at the end of the process, if changes are detectable. (default = false) -->
        <checkChanges>true</checkChanges>

        <!-- To compute an estimate of the repairability. Requires checkChanges = true. (default = false) -->
        <estimateRepairability>true</estimateRepairability>

        <!-- To use an optimized strategy for updates. (default = true) -->
        <useDeltaDBForChanges>true</useDeltaDBForChanges>

        <!-- Error percentages for dependencies and comparisons 
        All percentages are wrt table sizes (# tuples) -->
        <errorPercentages>
            <defaultPercentage>0.0</defaultPercentage>
            <vioGenQueries>
            <vioGenQuery id="e1"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e1"><comparison>(email1 != email2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e2"><comparison>(owner_last1 != owner_last2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e3"><comparison>(owner_first1 != owner_first2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e4"><comparison>(website1 != website2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e5"><comparison>(dba_name1 != dba_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e6"><comparison>(agency1 != agency2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(company_name1 == company_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e7"><comparison>(certification_type1 != certification_type2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(email1 == email2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e8"><comparison>(owner_last1 != owner_last2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(email1 == email2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e9"><comparison>(dba_name1 != dba_name2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(email1 == email2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e10"><comparison>(agency1 != agency2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e11"><comparison>(email1 == email2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e11"><comparison>(certification_type1 != certification_type2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e12"><comparison>(phone1 == phone2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e12"><comparison>(owner_last1 != owner_last2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e13"><comparison>(phone1 == phone2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery><vioGenQuery id="e13"><comparison>(agency1 != agency2)</comparison><percentage>0.1597444089456869</percentage></vioGenQuery></vioGenQueries>
        </errorPercentages>

        <!-- To control the way in which changing the value -->
        <dirtyStrategies>
            <defaultStrategy>
                <strategy> TypoRandom </strategy>
            </defaultStrategy> 
            <!-- possible strategies
                <strategy chars="*" charsToAdd="3">TypoAddString</strategy>
                <strategy chars="*" charsToAdd="3">TypoAppendString</strategy>
                <strategy charsToRemove="3">TypoRemoveString</strategy>
                <strategy charsToSwitch="3">TypoSwitchValue</strategy>
                <strategy>TypoActiveDomain</strategy>
                <strategy>TypoRandom</strategy>
            -->
        </dirtyStrategies>

        <randomErrors>
            <tables>
                <table name="clean"> 
                    <percentage>2</percentage> <!-- Percentage is wrt attributes to dirty in the table -->
                    <attributes>
                    <atrribute>company_name</atrribute><atrribute>dba_name</atrribute><atrribute>owner_first</atrribute><atrribute>owner_last</atrribute><atrribute>physical_address</atrribute><atrribute>mailing_address</atrribute><atrribute>phone</atrribute><atrribute>fax</atrribute><atrribute>email</atrribute><atrribute>agency</atrribute><atrribute>certification_type</atrribute><atrribute>certified</atrribute><atrribute>capability</atrribute><atrribute>service_type</atrribute><atrribute>certifying_agency</atrribute><atrribute>website</atrribute></attributes>
                </table>
            </tables>
        </randomErrors>
    
        <outlierErrors>
            <tables>
                <table name="clean">
                    <attributes>
                    <atrribute percentage="2" detectable="true">commodity_codes</atrribute></attributes>
                </table>
            </tables>
        </outlierErrors>
        
        <!-- The following parameters are used to control the sampling process.
            All the fields are optional, but they may be crucial to obtain a good random sample.
            In order to choose the cells to modify, BART will scan the result of a viogen query
            using the following sampling algorithm:
            1) First, a number of tuples are skipped. This is a random number choosed btw 
                0 and (offsetFactor * tableSize)
            2) Then BART will scan the result and will pickup tuples 
            with a probability p = probabilityFactor.
            
            BART uses three kinds of queries
            - Symmetric queries: for symmetric viogen queries (see paper)
            - Inequality queries: for viogen queries without equalities (i.e. inequalities only)
            - Standard queries: for all other viogen queries
        -->
        <vioGenQueriesConfiguration>
            <!-- STANDARD QUERIES -->
            <probabilityFactorForStandardQueries>0.25</probabilityFactorForStandardQueries>
            <offsetFactorForStandardQueries>0.05</offsetFactorForStandardQueries>
            <!-- SYMMETRIC QUERIES -->
            <probabilityFactorForSymmetricQueries>0.25</probabilityFactorForSymmetricQueries>
            <offsetFactorForSymmetricQueries>0.05</offsetFactorForSymmetricQueries>
            <!-- INEQUALITY QUERIES -->
            <probabilityFactorForInequalityQueries>0.05</probabilityFactorForInequalityQueries>
            <offsetFactorForInequalityQueries>0.05</offsetFactorForInequalityQueries>
            <windowSizeFactorForInequalityQueries>1.5</windowSizeFactorForInequalityQueries>
        </vioGenQueriesConfiguration>

    </configuration>
</task>